{"version":3,"sources":["candy-machine.ts","components/BodyText/BodyText.jsx","components/ThreeDShadow/ThreeDShadow.jsx","components/DefiCompBox/DefiCompBox.jsx","components/SectionPadding/SectionPadding.jsx","components/TitleText/TitleText.jsx","assests/images/yieldIcon.png","assests/images/solanaIcon.png","assests/images/stakingIcon.png","containers/DefiSection/DefiSection.jsx","containers/HeroSection/HeroSection.jsx","components/ImageWithLoadBg/ImageWithLoadBg.jsx","components/StepBox/StepBox.jsx","assests/images/nft.png","containers/NftStepsSection/NftStepsSection.jsx","containers/RoadmapSection/RoadmapSection.jsx","components/Footer/Footer.jsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","shortenAddress","address","chars","slice","ms","BodyText","props","children","ThreeDShadow","shadowDirection","direction","className","DefiCompBox","iconSrc","iconAlt","text","alt","src","SectionPadding","TitleText","small","DefiSection","StakingIcon","CollateralIcon","YieldIcon","HeroSection","ImageWithLoadBg","useState","imageLoaded","setImageLoaded","aspectRatio","style","paddingTop","backgroundColor","onLoad","StepBox","number","NftStepsSection","NftImage","roadmap","RoadmapSection","map","Footer","target","rel","href","ConnectButton","styled","WalletDialogButton","CounterText","MintContainer","div","MintButton","Button","renderCounter","days","hours","minutes","seconds","completed","Home","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","open","message","severity","undefined","alertState","setAlertState","startDate","setStartDate","useAnchorWallet","setCandyMachine","onMint","mintTxId","txTimeout","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","useEffect","toBase58","toLocaleString","disabled","onClick","variant","CircularProgress","date","onMount","onComplete","renderer","Snackbar","autoHideDuration","onClose","Alert","process","network","Connection","startDateSeed","parseInt","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7171add1.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection;\n  program: anchor.Program;\n}\n\ninterface CandyMachineState {\n  candyMachine: CandyMachine;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  goLiveDate: Date,\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineState> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  });\n\n  const idl = await anchor.Program.fetchIdl(\n    CANDY_MACHINE_PROGRAM,\n    provider\n  );\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program,\n  }\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  let goLiveDate = state.data.goLiveDate.toNumber();\n  goLiveDate = new Date(goLiveDate * 1000);\n\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  };\n}\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n  payer: anchor.web3.PublicKey,\n  treasury: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate();\n  const token = await getTokenWallet(payer, mint.publicKey);\n  const { connection, program } = candyMachine;\n  const metadata = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const rent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span\n  );\n\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n    signers: [mint],\n    instructions: [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer\n      ),\n      createAssociatedTokenAccountInstruction(\n        token,\n        payer,\n        payer,\n        mint.publicKey\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        token,\n        payer,\n        [],\n        1\n      ),\n    ],\n  });\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}","import React from 'react';\nimport './BodyText.scss'\n\nconst BodyText = props =>{\n    return(\n        <p>{props.children}</p>\n    )\n}\n\nexport default BodyText;","import React from 'react';\nimport './ThreeDShadow.scss';\n\nconst ThreeDShadow = props =>{\n    const {shadowDirection} = props;\n    if(!shadowDirection){\n        return null;\n    }\n    return(\n        <div direction = {shadowDirection} className = \"three-d-shadow\">\n            <div className = \"skew-container skew-top-container\">\n                <div className = 'skew-top'/>\n            </div>\n            <div className = \"skew-container skew-bottom-container\">\n                <div className = \"skew-bottom\"/>\n            </div>\n        </div>\n    )\n}\n\nexport default ThreeDShadow;","import React from 'react';\nimport BodyText from '../BodyText/BodyText';\nimport ThreeDShadow from '../ThreeDShadow/ThreeDShadow';\nimport './DefiCompBox.scss';\n\nconst DefiCompBox =props=>{\n    const {iconSrc, iconAlt, text, shadowDirection} = props;\n    return(\n        <div className = 'defi-comp-box'>\n            <ThreeDShadow shadowDirection = {shadowDirection}/>\n            <div className = 'icon-container'>\n                <img alt = {iconAlt} src = {iconSrc}/>\n            </div>\n            <BodyText>{text}</BodyText>\n        </div>\n    )\n}\n\nexport default DefiCompBox;","import React from 'react'\nimport './SectionPadding.scss';\n\nconst SectionPadding = props =>{\n    return(\n        <div className = 'section-padding'>\n            {props.children}\n        </div>\n    )\n}\n\nexport default SectionPadding;","import React from 'react';\nimport './TitleText.scss'\n\nconst TitleText = props =>{\n    return(\n        <h2 small = {props.small ? 'true' : 'false'}>{props.children}</h2>\n    )\n}\n\nexport default TitleText;","export default __webpack_public_path__ + \"static/media/yieldIcon.771a052e.png\";","export default __webpack_public_path__ + \"static/media/solanaIcon.abdf3810.png\";","export default __webpack_public_path__ + \"static/media/stakingIcon.60d000c8.png\";","import React from 'react';\nimport BodyText from '../../components/BodyText/BodyText';\nimport DefiCompBox from '../../components/DefiCompBox/DefiCompBox';\nimport SectionPadding from '../../components/SectionPadding/SectionPadding';\nimport TitleText from '../../components/TitleText/TitleText';\nimport './DefiSection.scss';\nimport YieldIcon from '../../assests/images/yieldIcon.png';\nimport CollateralIcon from '../../assests/images/solanaIcon.png';\nimport StakingIcon from '../../assests/images/stakingIcon.png';\n\nconst DefiSection = props => {\n    return (\n        <div className=\"defi-section\">\n            <SectionPadding>\n                <TitleText small>Honey’s DeFi NFTs</TitleText>\n                <BodyText>Our NFTs allow you to receive $HONEY, the utility token which powers our DeFi ecosystem</BodyText>\n                <div className=\"boxes-container\">\n                    <DefiCompBox\n                        iconSrc={StakingIcon}\n                        iconAlt='Staking icon'\n                        text=\"NFT staking\"\n                        shadowDirection=\"right\"\n                    />\n                    <DefiCompBox\n                        iconSrc={CollateralIcon}\n                        iconAlt='Solana icon'\n                        text=\"NFT collateral\"\n                    />\n                    <DefiCompBox\n                        iconSrc={YieldIcon}\n                        iconAlt='Yield graph'\n                        text=\"NFT yield\"\n                        shadowDirection='left'\n                    />\n                </div>\n            </SectionPadding>\n        </div>\n    )\n}\n\nexport default DefiSection;","import React from 'react';\nimport BodyText from '../../components/BodyText/BodyText';\nimport SectionPadding from '../../components/SectionPadding/SectionPadding';\nimport TitleText from '../../components/TitleText/TitleText';\nimport './HeroSection.scss';\n\nconst HeroSection = props =>{\n    return(\n        <div className = 'hero-section'>\n            <SectionPadding>\n                <TitleText>Solana’s most powerful NFTs</TitleText>\n                <BodyText>Liquidity mining NFTs</BodyText>\n            </SectionPadding>\n        </div>\n    )\n}\n\nexport default HeroSection;","import React, { useState } from 'react'\nimport './ImageWithLoadBg.scss';\n\nconst ImageWithLoadBg = props =>{\n    const [imageLoaded, setImageLoaded] = useState(false);\n    const {src, aspectRatio, alt} = props;\n    const onImageLoad = ()=> {\n        setImageLoaded(true)\n    }\n    return(\n        <div\n            style = {{\n                paddingTop: `${(1 / aspectRatio) * 100}%`,\n                backgroundColor: imageLoaded ? 'transparent' : '#9D9D9D' \n            }}\n            className = \"image-with-Bg\"\n        >\n            <div className = \"image\">\n                <img onLoad = {onImageLoad} src = {src} alt = {alt}/>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageWithLoadBg;","import React from 'react';\nimport BodyText from '../BodyText/BodyText';\nimport './StepBox.scss';\n\nconst StepBox = props =>{\n    const {number, text} = props;\n    return(\n        <div className = 'step-box'>\n            <div className = 'number'>\n                <BodyText>{number}</BodyText>\n            </div>\n            <BodyText>{text}</BodyText>\n        </div>\n    )\n}\n\nexport default StepBox;","export default __webpack_public_path__ + \"static/media/nft.dab5b576.png\";","import React from 'react';\nimport ImageWithLoadBg from '../../components/ImageWithLoadBg/ImageWithLoadBg';\nimport SectionPadding from '../../components/SectionPadding/SectionPadding';\nimport StepBox from '../../components/StepBox/StepBox';\nimport './NftStepsSection.scss';\nimport NftImage from '../../assests/images/nft.png';\n\nconst NftStepsSection = props =>{\n    return(\n        <div className = \"nft-steps-section\">\n            <SectionPadding>\n                <div className = 'container'>\n                    <div className = \"boxes-container\">\n                        <StepBox\n                            number = '01'\n                            text = \"Mint our Honey NFT\"\n                        />\n                        <StepBox\n                            number = '02'\n                            text = 'Hold the NFT in your wallet'\n                        />\n                        <StepBox\n                            number = \"03\"\n                            text = \"Earn passive rewards\"\n                        />\n                    </div>\n                    <div className = \"image-container\">\n                        <div className = \"image-inner\">\n                            <ImageWithLoadBg\n                                src = {NftImage}\n                                aspectRatio = {1.1}\n                                alt = \"\"\n                            />                            \n                        </div>\n                        <div className = \"image-inner\">\n                            <ImageWithLoadBg\n                                src = {NftImage}\n                                aspectRatio = {1.1}\n                                alt = \"\"\n                            />                            \n                        </div>\n                        <div className = \"image-inner\">\n                            <ImageWithLoadBg\n                                src = {NftImage}\n                                aspectRatio = {1.1}\n                                alt = \"\"\n                            />                            \n                        </div>\n                    </div>\n                </div>\n            </SectionPadding>\n        </div>\n    )\n}\n\nexport default NftStepsSection","import React from 'react';\nimport BodyText from '../../components/BodyText/BodyText';\nimport TitleText from '../../components/TitleText/TitleText';\nimport './RoadmapSection.scss';\n\nconst roadmap = [\n    'Launch  mint and generate NFTs',\n    'Raise liquidity for our SOL/HONEY pool',\n    'Raise liquidity for our Solana bridge',\n    'Build NFT DAO',\n    'NFT lending platform on Solana'\n]\n\nconst RoadmapSection = props =>{\n    return(\n        <div className = 'roadmap-section'>\n            <TitleText small>Roadmap</TitleText>\n            <div className = \"map-container\">\n                <div className = 'line'/>\n                {\n                    roadmap.map(text =>(\n                        <div key = {text} className = 'text-container'>\n                            <BodyText>{text}</BodyText>\n                        </div>\n                    ))\n                }                \n            </div>\n\n        </div>\n    )\n}\n\nexport default RoadmapSection;","import React from 'react';\nimport SectionPadding from '../SectionPadding/SectionPadding';\nimport './Footer.scss'\n\nconst Footer = props =>{\n    return(\n        <SectionPadding>\n            <footer>\n                Built with ❤️ by <a target = \"_blank\" rel = \"noreferrer\" href = \"https://raincloud.me\">raincloud.me</a>\n            </footer>            \n        </SectionPadding>\n    )\n}\n\nexport default Footer;","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"./candy-machine\";\n\nimport DefiSection from './containers/DefiSection/DefiSection';\nimport HeroSection from './containers/HeroSection/HeroSection';\nimport NftStepsSection from './containers/NftStepsSection/NftStepsSection';\nimport RoadmapSection from './containers/RoadmapSection/RoadmapSection';\nimport './components/MintButton/MintButton.scss';\nimport Footer from \"./components/Footer/Footer\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div``; // add your styles here\n\n\nconst MintButton = styled(Button)``; // add your styles here\n\nexport interface HomeProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet && candyMachine?.program) {\n        const mintTxId = await mintOneToken(\n          candyMachine,\n          props.config,\n          wallet.publicKey,\n          props.treasury\n        );\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          \"singleGossip\",\n          false\n        );\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n      setIsMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  useEffect(() => {\n    (async () => {\n      if (!wallet) return;\n\n      const { candyMachine, goLiveDate, itemsRemaining } =\n        await getCandyMachineState(\n          wallet as anchor.Wallet,\n          props.candyMachineId,\n          props.connection\n        );\n\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  }, [wallet, props.candyMachineId, props.connection]);\n\n  return (\n    <main>\n      {wallet && (\n        <p className=\"subtext\">Address: {shortenAddress(wallet.publicKey.toBase58() || \"\")}</p>\n      )}\n\n      {wallet && (\n        <p className=\"subtext\">Balance: {(balance || 0).toLocaleString()} SOL</p>\n      )}\n\n      <div className=\"App\">\n        <HeroSection />\n        <MintContainer>\n          {!wallet ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <MintButton\n              disabled={isSoldOut || isMinting || !isActive}\n              onClick={onMint}\n              variant=\"contained\"\n            >\n              {isSoldOut ? (\n                \"Sold Out :(\"\n              ) : isActive ? (\n                isMinting ? (\n                  <CircularProgress />\n                ) : (\n                  \"Mint  ⛏\"\n                )\n              ) : (\n                <Countdown\n                  date={startDate}\n                  onMount={({ completed }) => completed && setIsActive(true)}\n                  onComplete={() => setIsActive(true)}\n                  renderer={renderCounter}\n                />\n              )}\n            </MintButton>\n          )}\n        </MintContainer>\n        <NftStepsSection />\n        <DefiSection />\n        <RoadmapSection />\n        <Footer/>\n      </div>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </main>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst treasury = new anchor.web3.PublicKey(\n  process.env.REACT_APP_TREASURY_ADDRESS!\n);\n\nconst config = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\n);\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n        getPhantomWallet(),\n        getSlopeWallet(),\n        getSolflareWallet(),\n        getSolletWallet({ network }),\n        getSolletExtensionWallet({ network })\n    ],\n    []\n  );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect>\n            <WalletDialogProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                config={config}\n                connection={connection}\n                startDate={startDateSeed}\n                treasury={treasury}\n                txTimeout={txTimeout}\n              />\n            </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}